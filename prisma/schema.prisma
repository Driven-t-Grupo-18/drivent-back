generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique @db.VarChar(255)
  password             String                 @db.VarChar(255)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ActivityRegistration ActivityRegistration[]
  Booking              Booking?
  Enrollment           Enrollment?
  Session              Session[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Event {
  id                 Int      @id @default(autoincrement())
  title              String   @db.VarChar(255)
  backgroundImageUrl String   @db.VarChar(255)
  logoImageUrl       String   @db.VarChar(255)
  startsAt           DateTime
  endsAt             DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  cpf       String   @db.VarChar(255)
  birthday  DateTime
  phone     String   @db.VarChar(255)
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Address   Address?
  Ticket    Ticket?
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
}

model TicketType {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(255)
  price         Int
  isRemote      Boolean
  includesHotel Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Ticket        Ticket[]
}

model Ticket {
  id           Int          @id @default(autoincrement())
  ticketTypeId Int
  enrollmentId Int          @unique
  status       TicketStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Enrollment   Enrollment   @relation(fields: [enrollmentId], references: [id])
  TicketType   TicketType   @relation(fields: [ticketTypeId], references: [id])
  Payment      Payment?
}

model Payment {
  id             Int      @id @default(autoincrement())
  ticketId       Int      @unique
  value          Int
  cardIssuer     String
  cardLastDigits String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Ticket         Ticket   @relation(fields: [ticketId], references: [id])
}

model Hotel {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Rooms     Room[]
}

model Room {
  id        Int       @id @default(autoincrement())
  name      String
  capacity  Int
  hotelId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Hotel     Hotel     @relation(fields: [hotelId], references: [id])
  Booking   Booking[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Room      Room     @relation(fields: [roomId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Activity {
  id                   Int                    @id @default(autoincrement())
  activityDayId        Int
  startsAt             String                 @db.VarChar(255)
  endsAt               String                 @db.VarChar(255)
  name                 String                 @db.VarChar(255)
  location             String                 @db.VarChar(255)
  capacity             Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ActivityDay          ActivityDay            @relation(fields: [activityDayId], references: [id])
  ActivityRegistration ActivityRegistration[]
}

model ActivityDay {
  id                   Int                    @id @default(autoincrement())
  startsAt             DateTime
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Activity             Activity[]
  ActivityRegistration ActivityRegistration[]
}

model ActivityRegistration {
  id            Int         @id @default(autoincrement())
  userId        Int
  activityId    Int
  activityDayId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  ActivityDay   ActivityDay @relation(fields: [activityDayId], references: [id])
  Activity      Activity    @relation(fields: [activityId], references: [id])
  User          User        @relation(fields: [userId], references: [id])
}

enum TicketStatus {
  RESERVED
  PAID
}
